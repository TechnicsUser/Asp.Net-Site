@model IEnumerable<WebApplication9.Models.AspNetUser>

<script>
    function f1(item) {


        window.location = "/AspNetUsers/ViewUser/" + item;


    }
</script>
<script src="https://maps.google.com/maps/api/js?key=AIzaSyDZ3lksBTFTW4dbhlIe46K2BlM9BgCa9TY"></script>

<script>

    //var myVar = setInterval(getLocation, 1500);
    //clearInterval(myVar);
     function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError);
        } else {
         }
    }

    function showPosition(position) {

        var lat = position.coords.latitude;
        var lon = position.coords.longitude;

        var latlon = new google.maps.LatLng(lat, lon)
        var mapholder = document.getElementById('mapholder')
        mapholder.style.height = '250px';
        mapholder.style.width = window.screen.width;

        var myOptions = {
            center: latlon, zoom: 5,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            mapTypeControl: true,
            navigationControlOptions: { style: google.maps.NavigationControlStyle.SMALL }

        }

        var map = new google.maps.Map(document.getElementById("mapholder"), myOptions);

           var markers = [];

         @foreach (var item in Model)
         {
             if (item.LocationLat != null)
             {


         <text>
        var marker = new google.maps.Marker({
            map: map,
            position: { lat: @item.LocationLat, lng: @item.LocationLon },
            title: '@item.UserName'

        })
           .addListener('click', (function () {
            //   map.setZoom(9);
            window.location.href = "/AspNetUsers/ViewUser/" + "@item.Id";
        }))
        markers.push(marker);

        </text>
                 }
             }


         }

    function showError(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                x.innerHTML = "User denied the request for Geolocation."
                break;
            case error.POSITION_UNAVAILABLE:
                x.innerHTML = "Location information is unavailable."
                break;
            case error.TIMEOUT:
                x.innerHTML = "The request to get user location timed out."
                break;
            case error.UNKNOWN_ERROR:
                x.innerHTML = "An unknown error occurred."
                break;
        }
    }
      window.onload = getLocation;
</script>



<br />
<div class="col-lg-12">
    @*<button onclick="getLocation()">Show Map</button>*@
    @*style="position:absolute; top:150px; left:0px"*@
</div>

<div class="col-lg-12" id="mapholder"></div>

@foreach (var item in Model)
{
   
    if (item.UserName != null && item.EmailConfirmed == true)
    {
        var imgSrc = "";
        try
        {
            imgSrc = $"data:image/jpg;base64,{Convert.ToBase64String(item.UserPhoto)}";

        }
        catch
        {
            imgSrc = "../Images/noImg.png";

        }


        //onclick="f1(@item.Id, this)"
<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12" style="float : left" onclick="f1(@item.Id, this)">
    @*<h4>        @Html.DisplayFor(modelItem => item.UserName)    </h4>*@
    <hr>
    <h4>            @Html.ActionLink(@item.UserName, "UserViewViewModel", new { id = item.Id }) </h4>
    <hr>
    <h5>        @Html.DisplayFor(modelItem => item.FirstName)    </h5>

    <img class="myImg" src="@imgSrc" height="50"  />

    @*<img src="@Url.Action("UserPhotos", "Home" )" height="48" width="48" />*@

    <h6>            @Html.DisplayFor(modelItem => item.PhoneNumber)                       </h6>

    @*@Html.ActionLink("View", "ViewUser", new { id = item.Id }) |*@


    @*@Html.ActionLink("Details", "Details", new { id = item.CoralId }) |
        @Html.ActionLink("Edit", "Edit", new { id = item.CoralId }) |
        @Html.ActionLink("Delete", "Delete", new { id = item.CoralId })*@
</div>
    }
}
@*<div class="col-lg-3" style="float : none"></div>*@

<style>
    .myImg {
       width:160px;
        height:160px;
        background: #FFFFFF;
        margin: auto;
        -moz-border-radius: 60px;
        border-radius: 100px;
        padding: 6px;
        box-shadow: 0px 0px 20px #888;
    }
</style>